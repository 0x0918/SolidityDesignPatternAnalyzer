@INPROCEEDINGS{9050163,
  author={Marchesi, Lodovica and Marchesi, Michele and Destefanis, Giuseppe and Barabino, Giulio and Tigano, Danilo},
  booktitle={2020 IEEE International Workshop on Blockchain Oriented Software Engineering (IWBOSE)}, 
  title={Design Patterns for Gas Optimization in Ethereum}, 
  year={2020},
  volume={},
  number={},
  pages={9-15},
  abstract={Blockchain technology is an emerging technology that allows new forms of decentralized architectures, designed to generate trust among users, without the intervention of mediators or knowledge between the parties. Since 2015, thanks to the introduction of Smart Contracts by Ethereum, it is possible to run programs on the blockchain, greatly extending the potential of this technology. The programming of Smart Contract, through the Solidity language is different from the traditional one. First of all, any action that requires to modify the blockchain costs gas, which corresponds to a fraction of the currency used by that given blockchain, and therefore to real money. Gas optimization is a unique challenge in this context and has obvious implications. This document aims to provide a set of design patterns and tips to help gas saving in developing Smart Contracts on Ethereum. The provided patterns are presented divided into five main categories, based on their features.},
  keywords={},
  doi={10.1109/IWBOSE50093.2020.9050163},
  ISSN={},
  month={2}}

@ARTICLE{9089272,
	author = {M. Wohrer and U. Zdun},
	journal = {IEEE Software},
	title = {From Domain-Specific Language to Code: Smart Contracts and the Application of Design Patterns},
	year = {2020},
	volume = {37},
	number = {05},
	issn = {1937-4194},
	pages = {37-42},
	abstract = {Due to the conceptual discrepancy between legal contract terms and code, understanding and creating smart contracts without errors can be difficult. This article proposes smart contract design patterns and their automated application through (the use of) a domain-specific language and code generation.},
	keywords = {smart contracts;blockchain;dsl;security;law;encoding;domain specific languages},
	doi = {10.1109/MS.2020.2993470},
	publisher = {IEEE Computer Society},
	address = {Los Alamitos, CA, USA},
	month = {9}
}

@INPROCEEDINGS{8327565,
  author={Wohrer, Maximilian and Zdun, Uwe},
  booktitle={2018 International Workshop on Blockchain Oriented Software Engineering (IWBOSE)}, 
  title={Smart contracts: security patterns in the ethereum ecosystem and solidity}, 
  year={2018},
  volume={},
  number={},
  pages={2-8},
  abstract={Smart contracts that build up on blockchain technologies are receiving great attention in new business applications and the scientific community, because they allow untrusted parties to manifest contract terms in program code and thus eliminate the need for a trusted third party. The creation process of writing well performing and secure contracts in Ethereum, which is today's most prominent smart contract platform, is a difficult task. Research on this topic has only recently started in industry and science. Based on an analysis of collected data with Grounded Theory techniques, we have elaborated several common security patterns, which we describe in detail on the basis of Solidity, the dominating programming language for Ethereum. The presented patterns describe solutions to typical security issues and can be applied by Solidity developers to mitigate typical attack scenarios.},
  keywords={},
  doi={10.1109/IWBOSE.2018.8327565},
  ISSN={},
  month={3}}

@misc{fravoll,
	title = {A compilation of patterns and best practices for the smart contract programming language Solidity.},
	url = {https://github.com/fravoll/solidity-patterns}
}

@misc{maxwoe,
	title = {Smart Contracts Design Patterns in the Ethereum Ecosystem and Solidity Code.},
	url = {https://github.com/maxwoe/solidity_patterns}
}

@misc{cjgdev,
	title = {Smart-Contract Patterns written in Solidity, collated for community good.},
	url = {https://github.com/cjgdev/smart-contract-patterns}
}

@misc{openzeppelin,
	title = {OpenZeppelin Contracts is a library for secure smart contract development.},
	url = {https://github.com/OpenZeppelin/openzeppelin-contracts}
}

@misc{python,
	title = {The official home of the Python Programming Language.},
	url = {https://www.python.org/}
}

@misc{solidity,
	title = {Solidity Documentation.},
	url = {https://docs.soliditylang.org/}
}

@misc{ethereum,
	title = {What is Ethereum?},
	url = {https://ethereum.org/it/what-is-ethereum/}
}
@misc{python-solidity-parser,
	title={An experimental Solidity parser for Python built on top of a robust ANTLR4 grammar},
	url={https://github.com/ConsenSys/python-solidity-parser}
}
@misc{python-jsonschema,
	title={An implementation of the JSON Schema specification for Python},
	url={https://github.com/python-jsonschema/jsonschema}
}
@misc{ANTLR,
	title={ANother Tool for Language Recognition},
	url={https://www.antlr.org/}
}
@misc{JSON-Schema,
	title={JSON Schema | The home of JSON Schema},
	url={https://json-schema.org/}
}
@misc{JSON-Schema-Draft-07,
	title={JSON Schema Draft-07 Release Notes},
	url={https://json-schema.org/draft-07/json-schema-release-notes.html}
}